version: '3.9'

services:
  # Neo4j database dedicated to the automated test suite.
  # -----------------------------------------------------
  # We expose the Bolt port (7687) so the Node.js test runner
  # can connect via the official neo4j-driver. The HTTP port (7474)
  # is also published purely for developer convenience – you can
  # visit http://localhost:7474 in your browser to visually inspect
  # the graph while debugging a failing CI run.
  neo4j:
    image: neo4j:5.18.0
    container_name: neo4j_test
    ports:
      - '7687:7687'   # Bolt protocol – used by the driver
      - '7474:7474'   # Neo4j Browser – optional but handy
    environment:
      # The tests expect these credentials – see apps/api-server/tests/setupEnv.js
      - NEO4J_AUTH=neo4j/test12345
    # The default Neo4j image stores data inside /data. Mounting a
    # named volume means the database files live outside the container
    # layer, so the image can be re-pulled on CI without losing state.
    volumes:
      - neo4j_data:/data
    # Health-check makes CI wait until Neo4j is ready before running the tests.
    healthcheck:
      test: ["CMD", "bash", "-c", "cypher-shell -u neo4j -p test12345 'RETURN 1' || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7.2-alpine  # Lightweight official Redis image.
    container_name: redis
    profiles: ["diff"]  # Allows devs to opt-out: `docker compose --profile diff up -d`.
    ports:
      - "6379:6379"  # Exposes Redis so local apps/tests can connect.
    restart: unless-stopped  # Ensures the service auto-restarts on failure / host reboot.
    mem_limit: 256m  # Guardrail so laptops don't thrash when multiple services run.
    volumes:
      - redis_data:/data  # Persists Redis data outside the image layer.
    healthcheck:
      test: ["CMD", "redis-cli", "PING"]  # Simple connectivity ping.
      interval: 5s
      timeout: 5s
      retries: 5

  diff_worker:
    build:
      context: ./apps/py-ai-service  # Path to the Python worker source.
    container_name: diff_worker
    depends_on:
      - redis  # Waits until Redis health-checks pass.
    profiles: ["diff"]  # Same opt-in profile as Redis.
    environment:
      - REDIS_URL=redis://redis:6379  # Internal Docker DNS resolves `redis` → container IP.
      - NEO4J_URI=bolt://neo4j:7687  # Talks to the existing Neo4j service.
      - NEO4J_USER=neo4j  # Username aligns with test Neo4j instance.
      - NEO4J_PASSWORD=test12345  # Password matches NEO4J_AUTH in neo4j service.
    restart: unless-stopped  # Keep the worker alive across failures.

volumes:
  neo4j_data:
  redis_data: 